import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { modalController } from '@ionic/core';
import { OverlayBaseController } from '../util/overlay';
import { AngularDelegate } from './angular-delegate';
import * as ɵngcc0 from '@angular/core';
let ModalController = class ModalController extends OverlayBaseController {
    constructor(angularDelegate, resolver, injector) {
        super(modalController);
        this.angularDelegate = angularDelegate;
        this.resolver = resolver;
        this.injector = injector;
    }
    create(opts) {
        return super.create(Object.assign({}, opts, { delegate: this.angularDelegate.create(this.resolver, this.injector) }));
    }
};
ModalController.ɵfac = function ModalController_Factory(t) { return new (t || ModalController)(ɵngcc0.ɵɵinject(AngularDelegate), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
ModalController.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ModalController, factory: function (t) { return ModalController.ɵfac(t); } });
ModalController.ctorParameters = () => [
    { type: AngularDelegate },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ModalController, [{
        type: Injectable
    }], function () { return [{ type: AngularDelegate }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }]; }, null); })();
export { ModalController };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29udHJvbGxlci5qcyIsInNvdXJjZXMiOlsibmc6L0Bpb25pYy9hbmd1bGFyL3Byb3ZpZGVycy9tb2RhbC1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQWdCLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUU1RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBR3JELElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWdCLFNBQVEscUJBQXdEO0lBRTNGLFlBQ1UsZUFBZ0MsRUFDaEMsUUFBa0MsRUFDbEMsUUFBa0I7UUFFMUIsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBSmYsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQ2xDLGFBQVEsR0FBUixRQUFRLENBQVU7SUFHNUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFrQjtRQUN2QixPQUFPLEtBQUssQ0FBQyxNQUFNLG1CQUNkLElBQUksSUFDUCxRQUFRLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQ25FLENBQUM7SUFDTCxDQUFDO0NBQ0Y7O3lJQUFBOztZQWI0QixlQUFlO1lBQ3RCLHdCQUF3QjtZQUN4QixRQUFRO0VBQzNCO0FBTlUsZUFBZSw0QkFEM0IsVUFBVSxFQUFFLElBQ0E7QUFBZSxDQWdCM0I7K0lBQ0Q7U0FqQmEsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1vZGFsT3B0aW9ucywgbW9kYWxDb250cm9sbGVyIH0gZnJvbSAnQGlvbmljL2NvcmUnO1xuXG5pbXBvcnQgeyBPdmVybGF5QmFzZUNvbnRyb2xsZXIgfSBmcm9tICcuLi91dGlsL292ZXJsYXknO1xuXG5pbXBvcnQgeyBBbmd1bGFyRGVsZWdhdGUgfSBmcm9tICcuL2FuZ3VsYXItZGVsZWdhdGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTW9kYWxDb250cm9sbGVyIGV4dGVuZHMgT3ZlcmxheUJhc2VDb250cm9sbGVyPE1vZGFsT3B0aW9ucywgSFRNTElvbk1vZGFsRWxlbWVudD4ge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYW5ndWxhckRlbGVnYXRlOiBBbmd1bGFyRGVsZWdhdGUsXG4gICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICApIHtcbiAgICBzdXBlcihtb2RhbENvbnRyb2xsZXIpO1xuICB9XG5cbiAgY3JlYXRlKG9wdHM6IE1vZGFsT3B0aW9ucyk6IFByb21pc2U8SFRNTElvbk1vZGFsRWxlbWVudD4ge1xuICAgIHJldHVybiBzdXBlci5jcmVhdGUoe1xuICAgICAgLi4ub3B0cyxcbiAgICAgIGRlbGVnYXRlOiB0aGlzLmFuZ3VsYXJEZWxlZ2F0ZS5jcmVhdGUodGhpcy5yZXNvbHZlciwgdGhpcy5pbmplY3RvcilcbiAgICB9KTtcbiAgfVxufVxuIl19