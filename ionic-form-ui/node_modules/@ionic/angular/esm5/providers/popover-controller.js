import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import { popoverController } from '@ionic/core';
import { OverlayBaseController } from '../util/overlay';
import { AngularDelegate } from './angular-delegate';
import * as ɵngcc0 from '@angular/core';
var PopoverController = /** @class */ (function (_super) {
    tslib_1.__extends(PopoverController, _super);
    function PopoverController(angularDelegate, resolver, injector) {
        var _this = _super.call(this, popoverController) || this;
        _this.angularDelegate = angularDelegate;
        _this.resolver = resolver;
        _this.injector = injector;
        return _this;
    }
    PopoverController.prototype.create = function (opts) {
        return _super.prototype.create.call(this, tslib_1.__assign({}, opts, { delegate: this.angularDelegate.create(this.resolver, this.injector) }));
    };
    PopoverController.ctorParameters = function () { return [
        { type: AngularDelegate },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
PopoverController.ɵfac = function PopoverController_Factory(t) { return new (t || PopoverController)(ɵngcc0.ɵɵinject(AngularDelegate), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
PopoverController.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PopoverController, factory: function (t) { return PopoverController.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PopoverController, [{
        type: Injectable
    }], function () { return [{ type: AngularDelegate }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }]; }, null); })();
    return PopoverController;
}(OverlayBaseController));
export { PopoverController };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb250cm9sbGVyLmpzIiwic291cmNlcyI6WyJuZzovQGlvbmljL2FuZ3VsYXIvcHJvdmlkZXJzL3BvcG92ZXItY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFrQixpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVoRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBR3JEO0lBQXVDLDZDQUE0RDtJQUVqRywyQkFDVSxlQUFnQyxFQUNoQyxRQUFrQyxFQUNsQyxRQUFrQjtRQUg1QixZQUtFLGtCQUFNLGlCQUFpQixDQUFDLFNBQ3pCO1FBTFMscUJBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLGNBQVEsR0FBUixRQUFRLENBQTBCO1FBQ2xDLGNBQVEsR0FBUixRQUFRLENBQVU7O0lBRzVCLENBQUM7SUFFRCxrQ0FBTSxHQUFOLFVBQU8sSUFBb0I7UUFDekIsT0FBTyxpQkFBTSxNQUFNLGlDQUNkLElBQUksSUFDUCxRQUFRLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQ25FLENBQUM7SUFDTCxDQUFDOztnQkFaMEIsZUFBZTtnQkFDdEIsd0JBQXdCO2dCQUN4QixRQUFRO1NBRTFCO0lBUFMsaUJBQWlCLGdDQUQ3QixVQUFVLEVBQUUsUUFDQSxpQkFBaUIsQ0FnQjdCOzs7OytJQUNEO0lBREEsd0JBQUM7Q0FBQSxBQWhCRCxDQUF1QyxxQkFBcUIsR0FnQjNEO1NBaEJZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvcG92ZXJPcHRpb25zLCBwb3BvdmVyQ29udHJvbGxlciB9IGZyb20gJ0Bpb25pYy9jb3JlJztcblxuaW1wb3J0IHsgT3ZlcmxheUJhc2VDb250cm9sbGVyIH0gZnJvbSAnLi4vdXRpbC9vdmVybGF5JztcblxuaW1wb3J0IHsgQW5ndWxhckRlbGVnYXRlIH0gZnJvbSAnLi9hbmd1bGFyLWRlbGVnYXRlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvcG92ZXJDb250cm9sbGVyIGV4dGVuZHMgT3ZlcmxheUJhc2VDb250cm9sbGVyPFBvcG92ZXJPcHRpb25zLCBIVE1MSW9uUG9wb3ZlckVsZW1lbnQ+IHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFuZ3VsYXJEZWxlZ2F0ZTogQW5ndWxhckRlbGVnYXRlLFxuICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgKSB7XG4gICAgc3VwZXIocG9wb3ZlckNvbnRyb2xsZXIpO1xuICB9XG5cbiAgY3JlYXRlKG9wdHM6IFBvcG92ZXJPcHRpb25zKTogUHJvbWlzZTxIVE1MSW9uUG9wb3ZlckVsZW1lbnQ+IHtcbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlKHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBkZWxlZ2F0ZTogdGhpcy5hbmd1bGFyRGVsZWdhdGUuY3JlYXRlKHRoaXMucmVzb2x2ZXIsIHRoaXMuaW5qZWN0b3IpXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==