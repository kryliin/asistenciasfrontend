import * as tslib_1 from "tslib";
import { ApplicationRef, ComponentFactoryResolver, Injectable, InjectionToken, Injector, NgZone, ViewContainerRef } from '@angular/core';
import { LIFECYCLE_DID_ENTER, LIFECYCLE_DID_LEAVE, LIFECYCLE_WILL_ENTER, LIFECYCLE_WILL_LEAVE, LIFECYCLE_WILL_UNLOAD } from '@ionic/core';
import { NavParams } from '../directives/navigation/nav-params';
import * as ɵngcc0 from '@angular/core';
var AngularDelegate = /** @class */ (function () {
    function AngularDelegate(zone, appRef) {
        this.zone = zone;
        this.appRef = appRef;
    }
    AngularDelegate.prototype.create = function (resolver, injector, location) {
        return new AngularFrameworkDelegate(resolver, injector, location, this.appRef, this.zone);
    };
    AngularDelegate.ctorParameters = function () { return [
        { type: NgZone },
        { type: ApplicationRef }
    ]; };
AngularDelegate.ɵfac = function AngularDelegate_Factory(t) { return new (t || AngularDelegate)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef)); };
AngularDelegate.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AngularDelegate, factory: function (t) { return AngularDelegate.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularDelegate, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ApplicationRef }]; }, null); })();
    return AngularDelegate;
}());
export { AngularDelegate };
var AngularFrameworkDelegate = /** @class */ (function () {
    function AngularFrameworkDelegate(resolver, injector, location, appRef, zone) {
        this.resolver = resolver;
        this.injector = injector;
        this.location = location;
        this.appRef = appRef;
        this.zone = zone;
        this.elRefMap = new WeakMap();
        this.elEventsMap = new WeakMap();
    }
    AngularFrameworkDelegate.prototype.attachViewToDom = function (container, component, params, cssClasses) {
        var _this = this;
        return this.zone.run(function () {
            return new Promise(function (resolve) {
                var el = attachView(_this.zone, _this.resolver, _this.injector, _this.location, _this.appRef, _this.elRefMap, _this.elEventsMap, container, component, params, cssClasses);
                resolve(el);
            });
        });
    };
    AngularFrameworkDelegate.prototype.removeViewFromDom = function (_container, component) {
        var _this = this;
        return this.zone.run(function () {
            return new Promise(function (resolve) {
                var componentRef = _this.elRefMap.get(component);
                if (componentRef) {
                    componentRef.destroy();
                    _this.elRefMap.delete(component);
                    var unbindEvents = _this.elEventsMap.get(component);
                    if (unbindEvents) {
                        unbindEvents();
                        _this.elEventsMap.delete(component);
                    }
                }
                resolve();
            });
        });
    };
    return AngularFrameworkDelegate;
}());
export { AngularFrameworkDelegate };
export var attachView = function (zone, resolver, injector, location, appRef, elRefMap, elEventsMap, container, component, params, cssClasses) {
    var e_1, _a;
    var factory = resolver.resolveComponentFactory(component);
    var childInjector = Injector.create({
        providers: getProviders(params),
        parent: injector
    });
    var componentRef = (location)
        ? location.createComponent(factory, location.length, childInjector)
        : factory.create(childInjector);
    var instance = componentRef.instance;
    var hostElement = componentRef.location.nativeElement;
    if (params) {
        Object.assign(instance, params);
    }
    if (cssClasses) {
        try {
            for (var cssClasses_1 = tslib_1.__values(cssClasses), cssClasses_1_1 = cssClasses_1.next(); !cssClasses_1_1.done; cssClasses_1_1 = cssClasses_1.next()) {
                var clazz = cssClasses_1_1.value;
                hostElement.classList.add(clazz);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (cssClasses_1_1 && !cssClasses_1_1.done && (_a = cssClasses_1.return)) _a.call(cssClasses_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    var unbindEvents = bindLifecycleEvents(zone, instance, hostElement);
    container.appendChild(hostElement);
    if (!location) {
        appRef.attachView(componentRef.hostView);
    }
    componentRef.changeDetectorRef.reattach();
    elRefMap.set(hostElement, componentRef);
    elEventsMap.set(hostElement, unbindEvents);
    return hostElement;
};
var LIFECYCLES = [
    LIFECYCLE_WILL_ENTER,
    LIFECYCLE_DID_ENTER,
    LIFECYCLE_WILL_LEAVE,
    LIFECYCLE_DID_LEAVE,
    LIFECYCLE_WILL_UNLOAD
];
export var bindLifecycleEvents = function (zone, instance, element) {
    return zone.run(function () {
        var unregisters = LIFECYCLES
            .filter(function (eventName) { return typeof instance[eventName] === 'function'; })
            .map(function (eventName) {
            var handler = function (ev) { return instance[eventName](ev.detail); };
            element.addEventListener(eventName, handler);
            return function () { return element.removeEventListener(eventName, handler); };
        });
        return function () { return unregisters.forEach(function (fn) { return fn(); }); };
    });
};
var NavParamsToken = new InjectionToken('NavParamsToken');
var getProviders = function (params) {
    return [
        {
            provide: NavParamsToken, useValue: params
        },
        {
            provide: NavParams, useFactory: provideNavParamsInjectable, deps: [NavParamsToken]
        }
    ];
};
var ɵ0 = getProviders;
var provideNavParamsInjectable = function (params) {
    return new NavParams(params);
};
var ɵ1 = provideNavParamsInjectable;
export { ɵ0, ɵ1 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,