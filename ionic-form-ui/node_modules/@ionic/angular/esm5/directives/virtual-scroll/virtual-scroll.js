import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, EmbeddedViewRef, IterableDiffer, IterableDiffers, NgZone, SimpleChanges, TrackByFunction } from '@angular/core';
import { ProxyCmp } from '../proxies-utils';
import { VirtualFooter } from './virtual-footer';
import { VirtualHeader } from './virtual-header';
import { VirtualItem } from './virtual-item';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var IonVirtualScroll = /** @class */ (function () {
    function IonVirtualScroll(z, iterableDiffers, elementRef) {
        this.z = z;
        this.iterableDiffers = iterableDiffers;
        this.refMap = new WeakMap();
        this.el = elementRef.nativeElement;
        this.el.nodeRender = this.nodeRender.bind(this);
    }
    IonVirtualScroll.prototype.ngOnChanges = function (changes) {
        if (this.trackBy && 'items' in changes) {
            // React on virtualScroll changes only once all inputs have been initialized
            var value = changes['items'].currentValue;
            if (this.differ === undefined && value != null) {
                try {
                    this.differ = this.iterableDiffers.find(value).create(this.trackBy);
                }
                catch (e) {
                    throw new Error("Cannot find a differ supporting object '" + value + "'. VirtualScroll only supports binding to Iterables such as Arrays.");
                }
            }
        }
    };
    IonVirtualScroll.prototype.ngDoCheck = function () {
        // and if there actually are changes
        var changes = this.differ !== undefined && this.items ? this.differ.diff(this.items) : null;
        if (changes === null) {
            return;
        }
        // TODO: optimize
        this.checkRange(0);
    };
    IonVirtualScroll.prototype.nodeRender = function (el, cell, index) {
        var _this = this;
        return this.z.run(function () {
            var node;
            if (!el) {
                node = _this.itmTmp.viewContainer.createEmbeddedView(_this.getComponent(cell.type), { $implicit: cell.value, index: index }, index);
                el = getElement(node);
                _this.refMap.set(el, node);
            }
            else {
                node = _this.refMap.get(el);
                var ctx = node.context;
                ctx.$implicit = cell.value;
                ctx.index = cell.index;
            }
            // run sync change detections
            node.detectChanges();
            return el;
        });
    };
    IonVirtualScroll.prototype.getComponent = function (type) {
        switch (type) {
            case 'item': return this.itmTmp.templateRef;
            case 'header': return this.hdrTmp.templateRef;
            case 'footer': return this.ftrTmp.templateRef;
        }
        throw new Error('template for virtual item was not provided');
    };
    IonVirtualScroll.ctorParameters = function () { return [
        { type: NgZone },
        { type: IterableDiffers },
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        ContentChild(VirtualItem, { static: false })
    ], IonVirtualScroll.prototype, "itmTmp", void 0);
    tslib_1.__decorate([
        ContentChild(VirtualHeader, { static: false })
    ], IonVirtualScroll.prototype, "hdrTmp", void 0);
    tslib_1.__decorate([
        ContentChild(VirtualFooter, { static: false })
    ], IonVirtualScroll.prototype, "ftrTmp", void 0);
    IonVirtualScroll = tslib_1.__decorate([
        ProxyCmp({
            inputs: ['approxItemHeight', 'approxHeaderHeight', 'approxFooterHeight', 'headerFn', 'footerFn', 'items', 'itemHeight', 'headerHeight', 'footerHeight'],
            methods: ['checkEnd', 'checkRange', 'positionForItem']
        }),
    ], IonVirtualScroll);
IonVirtualScroll.ɵfac = function IonVirtualScroll_Factory(t) { return new (t || IonVirtualScroll)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
IonVirtualScroll.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IonVirtualScroll, selectors: [["ion-virtual-scroll"]], contentQueries: function IonVirtualScroll_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, VirtualItem, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, VirtualHeader, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, VirtualFooter, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itmTmp = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.hdrTmp = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ftrTmp = _t.first);
    } }, inputs: { approxItemHeight: "approxItemHeight", approxHeaderHeight: "approxHeaderHeight", approxFooterHeight: "approxFooterHeight", headerFn: "headerFn", footerFn: "footerFn", items: "items", itemHeight: "itemHeight", headerHeight: "headerHeight", footerHeight: "footerHeight", trackBy: "trackBy" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function IonVirtualScroll_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(IonVirtualScroll, [{
        type: Component,
        args: [{
                selector: 'ion-virtual-scroll',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: [
                    'approxItemHeight',
                    'approxHeaderHeight',
                    'approxFooterHeight',
                    'headerFn',
                    'footerFn',
                    'items',
                    'itemHeight',
                    'headerHeight',
                    'footerHeight',
                    'trackBy'
                ]
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ElementRef }]; }, { itmTmp: [{
            type: ContentChild,
            args: [VirtualItem, { static: false }]
        }], hdrTmp: [{
            type: ContentChild,
            args: [VirtualHeader, { static: false }]
        }], ftrTmp: [{
            type: ContentChild,
            args: [VirtualFooter, { static: false }]
        }] }); })();
    return IonVirtualScroll;
}());
export { IonVirtualScroll };
var getElement = function (view) {
    var rootNodes = view.rootNodes;
    for (var i = 0; i < rootNodes.length; i++) {
        if (rootNodes[i].nodeType === 1) {
            return rootNodes[i];
        }
    }
    throw new Error('virtual element was not created');
};
var ɵ0 = getElement;
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,